import pymysql
from datetime import date

# 2. vytvoreni_tabulky() ‚Äì Vytvo≈ôen√≠ tabulky, pokud neexistuje
# OK OK - Funkce vytvo≈ô√≠ tabulku ukoly, pokud je≈°tƒõ neexistuje. create_table_if_not_exist(conn)
#  - Ovƒõ≈ô√≠ existenci tabulky v datab√°zi.

def create_table_if_not_exist(conn): #slo by na test
    cursor = conn.cursor()
    try:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Ukoly_test (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nazev VARCHAR (50) NOT NULL,
            popis VARCHAR (255) NOT NULL,
            stav  ENUM ('Nezah√°jeno', 'Prob√≠h√°', 'Hotovo') NOT NULL DEFAULT 'Nezah√°jeno', 
            datum_vytvoreni DATE DEFAULT (CURRENT_DATE)
            );
        ''')
        print("‚úÖ Tabulka 'Ukoly_test' je vytvo≈ôena.")
        conn.commit()
    except pymysql.MySQLError as err:
        print(f"Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {err}")
    finally:
        cursor.close()

# ---------- Funkce programu ----------
# 1. pripojeni_db() ‚Äì P≈ôipojen√≠ k datab√°zi
# OK OK Funkce vytvo≈ô√≠ p≈ôipojen√≠ k MySQL datab√°zi. connect_to_db()
# OK Pokud p≈ôipojen√≠ sel≈æe, zobraz√≠ chybovou zpr√°vu.


def connect_to_db(): #slo by na test
    try:
        conn = pymysql.connect(
                host="mysql80.r4.websupport.sk",
                port=3314,
                user="EsPMMROq",
                password="79_|rBg[1F=`}cj|I%kc",
                database="Task_manager_SQL"            
            )
        print("\nP≈ôipojen√≠ k datab√°zi bylo √∫spƒõ≈°n√©. Datab√°ze Task_manager_SQL je k dispozici.")
        
        create_table_if_not_exist(conn)
        return conn
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi p≈ôipojov√°n√≠: {err}")



# 3. hlavni_menu() ‚Äì Hlavn√≠ nab√≠dka - def main()
# OK OK  Zobraz√≠ mo≈ænosti menu:
# OK OK Pokud u≈æivatel zad√° ≈°patnou volbu, program ho upozorn√≠ a nech√° ho vybrat znovu.

def main(): #k testu
    try:
        conn = connect_to_db()
    except pymysql.MySQLError as err:
        print(f"‚ùå Nelze nav√°zat spojen√≠ s datab√°z√≠ v main: {err}")
        return
    
    while True:
        print("\nSpr√°vce √∫kol≈Ø - Hlavn√≠ menu")
        print("1. P≈ôidat √∫kol")
        print("2. Zobrazit v≈°echny √∫koly")
        print("3. Aktualizovat stav √∫kolu")
        print("4. Odstranit √∫kol")
        print("5. Ukonƒçit program")

        vyber_cisla=(input("Vyberte mo≈ænost (1-5):"))
                 
        if vyber_cisla == "1":
            print("\nP≈ôid√°n√≠ nov√©ho √∫kolu")
            pridat_ukol_sql(conn)
        elif vyber_cisla == "2":
            print("\nZobrazen√≠ v≈°ech √∫kol≈Ø:")
            get_all_tasks(conn)
        elif vyber_cisla == "3":
            print("\nVolba Aktualizovat stav √∫kolu:")
            aktualizace_ukolu(conn)
        elif vyber_cisla == "4":
            print("\nVolba Odstranƒõn√≠ √∫kolu:")
            odstraneni_ukolu(conn)
        elif vyber_cisla == "5":
            print("\nKonec programu, naschledanou.üëã\n")
            exit()
        else:
            print("\nZadejte spr√°vnou volbu menu.")

        conn.close()

# 4. pridat_ukol() ‚Äì P≈ôid√°n√≠ √∫kolu
#  U≈æivatel zad√° n√°zev a popis √∫kolu.
# OK     Povinn√© √∫daje: N√°zev a popis jsou povinn√©, nesm√≠ b√Ωt pr√°zdn√©.
# OK     Automatick√© hodnoty:
# OK    1. √ökol dostane ID automaticky.
# OK    2. V√Ωchoz√≠ stav ukolu: Nezah√°jeno
# OK OK Po splnƒõn√≠ v≈°ech podm√≠nek se √∫kol ulo≈æ√≠ do datab√°ze - def pridat_ukol_sql(conn,nazev_ukolu, popis_ukolu)

def pridat_ukol_sql(conn,nazev_ukolu, popis_ukolu):
    pridat_ukol_vstupy(conn)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO Ukoly_test (nazev, popis) VALUES (%s,%s);", 
        (nazev_ukolu, popis_ukolu)
        )
    conn.commit()
    cursor.close()

def pridat_ukol_vstupy(conn, nazev: str, popis: str) -> str:
    nazev = nazev.strip()
    popis = popis.strip()
    if not nazev or not popis:
        return ""
    return f"{nazev}: {popis}"  


# 5. zobrazit_ukoly() ‚Äì Zobrazen√≠ √∫kol≈Ø
#  OK OK Seznam v≈°ech √∫kol≈Ø s informacemi: ID, n√°zev, popis, stav. -> def get_all_tasks(conn)
#  OK OK Filtr: Zobraz√≠ pouze √∫koly se stavem "Nezah√°jeno" nebo "Prob√≠h√°". -> def data_filter(conn)
#  Pokud nejsou ≈æ√°dn√© √∫koly, zobraz√≠ informaci, ≈æe seznam je pr√°zdn√Ω.


def get_all_tasks(conn):
    print("\nSeznam v≈°ech √∫kol≈Ø:") 
    try:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute(
            "SELECT id, nazev, popis, stav FROM Ukoly_test;"
        )
        all_tasks = cursor.fetchall()
        return all_tasks
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ √∫kol≈Ø: {err}")
        #return []
    finally:
        cursor.close()

 

def data_filter(conn):# k testu 
    cursor = conn.cursor(pymysql.cursors.DictCursor)
    try:
        cursor.execute(
            "SELECT id, nazev, popis, stav FROM Ukoly_test WHERE stav IN ('Nezah√°jeno', 'Prob√≠h√°');"
        )
        nedokoncene_ukoly = cursor.fetchall()
        return nedokoncene_ukoly
    finally:
        cursor.close()

# def data_filter_input(conn): #PROBLEM S INPUTMI
#     vyber_filtru = input("\nChcete vyfiltrovat pouze Nedokonƒçen√© √∫koly? Napi≈°te 'ano' nebo 'ne': ").strip()      
#     if vyber_filtru == 'ano':
#         print("\nZobrazen√≠ nedokonƒçen√Ωch √∫kol≈Ø: ")
#         vysledky_filtru = data_filter(conn)        
#         for vysledky in vyber_filtru:
#             print(vysledky)
#     elif vyber_filtru == "":
#         print("\nVyplnƒõn√≠ je povinn√©")
#     else:
#         print("Budete p≈ôesmƒõrov√°ni do hlavn√≠ho menu.")
        

# 6. aktualizovat_ukol() ‚Äì Zmƒõna stavu √∫kolu
# OK OK     U≈æivatel vid√≠ seznam √∫kol≈Ø (ID, n√°zev, stav). -> get_all_tasks(conn)
# OK OK     Vybere √∫kol podle ID. -> def get_task_id(conn,vyber_id)
# OK OK     Dostane na v√Ωbƒõr nov√Ω stav: "Prob√≠h√°" nebo "Hotovo"
# OK OK     Po potvrzen√≠ se aktualizuje DB. -> def update_tast_status(conn, vyber_id, novy_stav):
# OK Pokud zad√° neexistuj√≠c√≠ ID, program ho upozorn√≠ a nech√° ho vybrat znovu.
def aktualizace_ukolu(conn,id):
    get_all_tasks(conn)
    get_task_id(conn,id)
    

      
#vstav dat do formatu na vyber cisla, aby to nemusel s diakritikou vyplnat. podobne ako vyber 

def update_tast_status(conn, vyber_id, novy_stav):
    povolene_stavy = ['Prob√≠h√°', 'Hotovo']
    if novy_stav not in povolene_stavy:
        raise ValueError("Neplatn√Ω stav √∫kolu")
    try:
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE Ukoly_test SET stav = %s WHERE id = %s;", 
            (novy_stav, vyber_id)
        )
        conn.commit()
        ukol_update =cursor.fetchone()
        print("‚úÖ √ökol byl √∫spƒõ≈°nƒõ aktualizov√°n.")
        return ukol_update
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi aktualizaci √∫kolu: {err}")
        return 0
    finally:
        cursor.close()


def get_task_id(conn,vyber_id):#pouzitie na aktualizaciu aj delete #k testu
    try:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute(
            "SELECT id FROM Ukoly_test WHERE id=%s;",
            (vyber_id,)
        )
        vyber_id = cursor.fetchone()
        return vyber_id["id"] if vyber_id else None #Ak neexistuje (status is None)
            #raise ValueError("Zadejte sppr√°vn√© id √∫kolu.")
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi v√Ωbƒõru id √∫kolu {err}")
    finally:
        cursor.close()
 
  
def kontrola_id_status(conn, vyber_id):
    id_exist = get_task_id(conn, vyber_id)
    if id_exist is None:
        raise ValueError("Zadan√© ID neexistuje.")
    
    
    #        
            

#             conn.commit()
#             print("\n‚úÖ √ökol byl √∫spƒõ≈°nƒõ aktualizov√°n.\nNyn√≠ budete p≈ôesmƒõrov√°ni do hlavn√≠ho menu.")
#             return
#         else:
#             print("\nZadejte spr√°vnou hodnotu pro stav")
        
    
    

# 7. odstranit_ukol() ‚Äì Odstranƒõn√≠ √∫kolu
# OK U≈æivatel vid√≠ seznam √∫kol≈Ø.
# OK Vybere √∫kol podle ID.
# OK Po potvrzen√≠ bude √∫kol trvale odstranƒõn z datab√°ze.
# OK Pokud u≈æivatel zad√° neexistuj√≠c√≠ ID, program ho upozorn√≠ a nech√° ho vybrat znovu.
def odstraneni_ukolu():    
    print("\nSeznam v≈°ech √∫kol≈Ø:") 
    cursor = conn.cursor(pymysql.cursors.DictCursor)
    cursor.execute(
        "SELECT id, nazev, popis, stav FROM Ukoly_test;"
        )
    ukoly_vsechny = cursor.fetchall()
    if len(ukoly_vsechny) == 0:
        print("Seznam √∫kol≈Ø je pr√°zdn√Ω")
    for ukol in ukoly_vsechny:
        print(ukol)
    vsechna_id = [ukol['id'] for ukol in ukoly_vsechny]

    while True:
        try:
            vyber_ukolu_id = int(input("\nZadejte ID √∫kolu, kter√Ω chcete smazat: ")) # musime osetrit ValueError, keby sa nezada cislo

            if vyber_ukolu_id in vsechna_id:
                print(f"K odstranƒõn√≠ jste vybrali √∫kol s id {vyber_ukolu_id}.")
                cursor.execute(
                    "DELETE FROM Ukoly_test WHERE id=%s;",
                    (vyber_ukolu_id,)
                )
                print("√ökol byl odstranƒõn.")
                break
            else:
                print("\nZadejte spr√°vnou hodnotu id.")
        except ValueError:
            print("\n‚ùó Pros√≠m, zadejte platn√© ƒç√≠slo.")
        except pymysql.MySQLError as err:
            print(f"‚ùå Chyba p≈ôi v√Ωbƒõru id √∫kolu {err}")

#------SPURSTENIE PROGRAMU-------

conn = connect_to_db()
if conn:
    
   