import pymysql
from datetime import date

def vytvor_pripojeni(): 
    try:
        conn = pymysql.connect(
                host="mysql80.r4.websupport.sk",
                port=3314,
                user="EsPMMROq",
                password="79_|rBg[1F=`}cj|I%kc",
                database="Task_manager_SQL"            
            )
        print("\n‚úÖ P≈ôipojen√≠ k datab√°zi bylo √∫spƒõ≈°n√©. Datab√°ze Task_manager_SQL je k dispozici.")
        
        return conn
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi p≈ôipojov√°n√≠: {err}")   
        return None 
    
def create_table_if_not_exist(conn) -> bool:
    """
    Vytvor√≠ tabulku Ukoly_test, ak e≈°te neexistuje.
    Vracia True, ak bola vytvoren√° alebo u≈æ existovala.
    Vracia False, ak nastala chyba.
    """
    try:
        cursor = conn.cursor()

        # Overenie, ƒçi u≈æ tabuƒæka existuje
        cursor.execute("SHOW TABLES LIKE 'Ukoly_test';")
        existuje = cursor.fetchone()

        if existuje:
            print("‚ÑπÔ∏è  Tabulka 'Ukoly_test' ji≈æ existuje.")
            return True

        # Ak neexistuje, vytvor ju
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Ukoly_test (
                id INT PRIMARY KEY AUTO_INCREMENT,
                nazev VARCHAR(50) NOT NULL,
                popis VARCHAR(255) NOT NULL,
                stav ENUM('Nezah√°jeno', 'Prob√≠h√°', 'Hotovo') NOT NULL DEFAULT 'Nezah√°jeno',
                datum_vytvoreni DATE DEFAULT (CURRENT_DATE)
            );
        ''')
        conn.commit()
        print("‚úÖ Tabulka 'Ukoly_test' byla vytvo≈ôena.")
        return True

    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {err}")
        return False

    finally:
        cursor.close()

def get_all_tasks(conn):
    try:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute("SELECT id, nazev, popis, stav FROM Ukoly_test;")
        tasks = cursor.fetchall()  # ‚úÖ d√° sa testova≈• pomocou assert
        
        if tasks:
            print("\nSeznam v≈°ech √∫kol≈Ø:")
            for task in tasks:
                print(task)
        else:
            print("üì≠ Seznam √∫kol≈Ø je pr√°zdn√Ω.")
        return tasks
    
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ √∫kol≈Ø: {err}")
        return []
    finally:
        cursor.close()
        
def get_task_id(conn,vyber_id):#pouzitie na aktualizaciu aj delete #k testu
    """
    Z√≠ska ID √∫lohy podƒæa zadan√©ho ID.
    """
    try:
        cursor = conn.cursor(pymysql.cursors.DictCursor)
        cursor.execute(
            "SELECT id FROM Ukoly_test WHERE id=%s;",
            (vyber_id,)
        )
        vyber_id = cursor.fetchone()
        return vyber_id["id"] if vyber_id else None #Ak neexistuje (status is None)
            #raise ValueError("Zadejte sppr√°vn√© id √∫kolu.")
    except pymysql.MySQLError as err:
        print(f"‚ùå Chyba p≈ôi v√Ωbƒõru id √∫kolu {err}")
    finally:
        cursor.close()

# ------ROZDIEL PRINT A RETURN-----
# ‚ÄûM√°m 0 jabƒ∫k.‚Äú (to je v√Ωpis ‚Äì print)
# Ale ty sa ho mus√≠≈° op√Ωta≈•:
# ‚ÄûKoƒæko jabƒ∫k m√°≈°?‚Äú (to je return), aby si mohla rozhodn√∫≈•, ƒço ƒèalej.

#----------ODSTANENIE ULOHY-----------------

def odstraneni_ukolu_input(conn):
    tasks = get_all_tasks(conn)
    if not tasks:
        print("Nen√≠ co maza≈•.\n")
        return

    while True:
        try:
            vyber_id = int(input("\nZadejte ID √∫kolu, kter√Ω chcete smazat: ")) #vstup INT, tak hlaska na Value error.
            if get_task_id(conn, vyber_id):
                potvrdenie = input(f"Opravdu chcete smazat √∫kol s ID {vyber_id}? Pro potvrzen√≠ akce napi≈°te 'ano'): ").strip().lower()
                if potvrdenie == 'ano':
                    if delete_task_by_id(conn, vyber_id):
                        print("‚úÖ √ökol byl odstranƒõn.")
                        return
                else:
                    print("Zru≈°eno u≈æivatelem.")
                    break
            else:
                print("‚ùó ID √∫kolu neexistuje.")
        except ValueError:
            print("‚ùó Pros√≠m, zadejte platn√© ƒç√≠slo.")

def delete_task_by_id(conn, task_id) -> bool:
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM Ukoly_test WHERE id=%s;", (task_id,))
        conn.commit()
        return cursor.rowcount > 0  # True ak sa nieƒço zmazalo
    finally:
        cursor.close()

#--------SPUSTENIE
conn = vytvor_pripojeni()
if conn:
    if create_table_if_not_exist(conn):
            print("‚úÖ Tabulka je p≈ôipraven√°.\n")
            odstraneni_ukolu_input(conn)

    else:
        print("‚ùå Chyba p≈ôi p≈ô√≠pravƒõ tabulky.")
        
    conn.close()
else:
    print("‚ùå P≈ôipojen√≠ selhalo.")


#mozne testy
# def test_delete_task_success(conn):
#     # Najsk√¥r si vlo≈æ√≠me testovac√≠ √∫kol
#     cursor = conn.cursor()
#     cursor.execute("INSERT INTO Ukoly_test (nazev, popis) VALUES ('Test √∫kol', 'Na smaz√°n√≠');")
#     conn.commit()
#     task_id = cursor.lastrowid
#     cursor.close()

#     assert get_task_id(conn, task_id) == task_id

#     result = delete_task_by_id(conn, task_id)
#     assert result is True

#     assert get_task_id(conn, task_id) is None